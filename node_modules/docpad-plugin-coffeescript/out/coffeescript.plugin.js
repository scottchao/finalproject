// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var CoffeescriptPlugin;
  return CoffeescriptPlugin = (function(_super) {

    __extends(CoffeescriptPlugin, _super);

    function CoffeescriptPlugin() {
      return CoffeescriptPlugin.__super__.constructor.apply(this, arguments);
    }

    CoffeescriptPlugin.prototype.name = 'coffeescript';

    CoffeescriptPlugin.prototype.config = {
      compileOptions: {}
    };

    CoffeescriptPlugin.prototype.render = function(opts) {
      var coffee, compileOptions, file, fileFullPath, inExtension, key, outExtension, value, _ref, _ref1;
      inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file;
      if ((inExtension === 'coffee' || inExtension === 'litcoffee') && (outExtension === 'js' || outExtension === null)) {
        coffee = require('coffee-script');
        fileFullPath = file.get('fullPath');
        compileOptions = {
          filename: fileFullPath,
          literate: coffee.helpers.isLiterate(fileFullPath)
        };
        _ref = this.getConfig().compileOptions;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          if ((_ref1 = compileOptions[key]) == null) {
            compileOptions[key] = value;
          }
        }
        opts.content = coffee.compile(opts.content, compileOptions);
      }
    };

    return CoffeescriptPlugin;

  })(BasePlugin);
};
